{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport moment from \"moment\";\nimport { mapState } from \"vuex\";\nexport default {\n  props: {\n    recipient: Object\n  },\n  methods: {\n    getOrigin(message) {\n      return message.from == this.recipient.summonerName;\n    },\n    toggleOpen() {\n      if (!this.isOpen) {\n        this.$socket.sendSystemMessage(\"MESSAGE_PRIVATE_GET\", {\n          data: this.recipient\n        }, (response, error) => {\n          if (error) {\n            console.log(\"Flyback error:\");\n            console.log(error);\n          }\n          this.$store.dispatch(\"setPrivateChatReadMessages\", this.recipient);\n        });\n      }\n      this.$store.dispatch(\"setPrivateChatStatus\", {\n        summonerName: this.recipient.summonerName,\n        change: \"toggle\"\n      });\n    },\n    closeChat() {\n      this.$store.dispatch(\"setPrivateChatClosed\", this.recipient);\n    },\n    formatTime(message) {\n      return `${moment(message.messageTimestamp).format(\"HH:mm\")}`;\n    },\n    sendMessage() {\n      const message = this.$refs.chatInput.value;\n      if (message.trim() == \"\") {\n        return;\n      }\n      this.$refs.chatInput.value = \"\";\n      this.$socket.sendSystemMessage(\"MESSAGE_PRIVATE\", {\n        data: this.recipient,\n        message: message,\n        from: this.user.summonerName\n      }, (response, error) => {\n        if (error) {\n          console.log(\"Flyback error:\");\n          console.log(error);\n        }\n      });\n    }\n  },\n  updated() {\n    const container = this.$el.querySelector(\"#messages\");\n    container.scrollTop = container.scrollHeight;\n  },\n  mounted() {\n    const container = this.$el.querySelector(\"#messages\");\n    container.scrollTop = container.scrollHeight;\n  },\n  computed: mapState({\n    user: state => state.user,\n    hasUnread(state) {\n      const thischat = state.privateChat.chatMessages[this.recipient.summonerName];\n      let unreadMessages = 0;\n      if (thischat) {\n        unreadMessages = thischat.filter(message => {\n          return !message.read;\n        }).length;\n      }\n      if (!this.isOpen && unreadMessages > 0) {\n        return true;\n      } else {\n        return false;\n      }\n    },\n    isOpen(state) {\n      return state.privateChat.openChats.filter(recipient => {\n        return recipient.summonerName == this.recipient.summonerName && recipient.shows;\n      }).length > 0;\n    },\n    messages(state) {\n      const msgs = [...state.privateChat.chatMessages[this.recipient.summonerName]];\n      if (msgs) {\n        msgs.reverse();\n      }\n      return msgs;\n      //   return msgs\n      //     ? msgs.sort((a, b) => {\n      //         if (new Date(a.messageTimestamp) > new Date(b.messageTimestamp)) {\n      //           return 1;\n      //         } else if (\n      //           new Date(b.messageTimestamp) > new Date(a.messageTimestamp)\n      //         ) {\n      //           return -1;\n      //         } else {\n      //           return 0;\n      //         }\n      //       })\n      //     : [];\n    }\n  })\n};","map":{"version":3,"names":["moment","mapState","props","recipient","Object","methods","getOrigin","message","from","summonerName","toggleOpen","isOpen","$socket","sendSystemMessage","data","response","error","console","log","$store","dispatch","change","closeChat","formatTime","messageTimestamp","format","sendMessage","$refs","chatInput","value","trim","user","updated","container","$el","querySelector","scrollTop","scrollHeight","mounted","computed","state","hasUnread","thischat","privateChat","chatMessages","unreadMessages","filter","read","length","openChats","shows","messages","msgs","reverse"],"sources":["src/components/Chat/ChatBlock.vue"],"sourcesContent":["<template>\r\n  <div class=\"chatblock\" :class=\"{ open: isOpen, unread: hasUnread }\">\r\n    <div class=\"head\" @click=\"toggleOpen\">\r\n      <button class=\"closeChatBtn\" @click.stop.prevent=\"closeChat\">\r\n        <i class=\"far fa-times\"></i>\r\n      </button>\r\n      {{ recipient.summonerName }}\r\n    </div>\r\n    <div class=\"content\">\r\n      <div class=\"messages\" id=\"messages\">\r\n        <div\r\n          class=\"message\"\r\n          v-for=\"(message, index) in messages\"\r\n          :key=\"index\"\r\n          :class=\"{ recieved: getOrigin(message) }\"\r\n        >\r\n          [{{ formatTime(message) }}] {{ message.from }}:\r\n          {{ message.data }}\r\n        </div>\r\n      </div>\r\n      <div class=\"input\">\r\n        <input\r\n          type=\"text\"\r\n          ref=\"chatInput\"\r\n          v-on:keyup.enter=\"sendMessage\"\r\n          placeholder=\"Your message...\"\r\n        />\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport moment from \"moment\";\r\nimport { mapState } from \"vuex\";\r\nexport default {\r\n  props: {\r\n    recipient: Object\r\n  },\r\n  methods: {\r\n    getOrigin(message) {\r\n      return message.from == this.recipient.summonerName;\r\n    },\r\n    toggleOpen() {\r\n      if (!this.isOpen) {\r\n        this.$socket.sendSystemMessage(\r\n          \"MESSAGE_PRIVATE_GET\",\r\n          { data: this.recipient },\r\n          (response, error) => {\r\n            if (error) {\r\n              console.log(\"Flyback error:\");\r\n              console.log(error);\r\n            }\r\n            this.$store.dispatch(\"setPrivateChatReadMessages\", this.recipient);\r\n          }\r\n        );\r\n      }\r\n\r\n      this.$store.dispatch(\"setPrivateChatStatus\", {\r\n        summonerName: this.recipient.summonerName,\r\n        change: \"toggle\"\r\n      });\r\n    },\r\n    closeChat() {\r\n      this.$store.dispatch(\"setPrivateChatClosed\", this.recipient);\r\n    },\r\n    formatTime(message) {\r\n      return `${moment(message.messageTimestamp).format(\"HH:mm\")}`;\r\n    },\r\n    sendMessage() {\r\n      const message = this.$refs.chatInput.value;\r\n      if (message.trim() == \"\") {\r\n        return;\r\n      }\r\n\r\n      this.$refs.chatInput.value = \"\";\r\n      this.$socket.sendSystemMessage(\r\n        \"MESSAGE_PRIVATE\",\r\n        {\r\n          data: this.recipient,\r\n          message: message,\r\n          from: this.user.summonerName\r\n        },\r\n        (response, error) => {\r\n          if (error) {\r\n            console.log(\"Flyback error:\");\r\n            console.log(error);\r\n          }\r\n        }\r\n      );\r\n    }\r\n  },\r\n  updated() {\r\n    const container = this.$el.querySelector(\"#messages\");\r\n    container.scrollTop = container.scrollHeight;\r\n  },\r\n  mounted() {\r\n    const container = this.$el.querySelector(\"#messages\");\r\n    container.scrollTop = container.scrollHeight;\r\n  },\r\n  computed: mapState({\r\n    user: state => state.user,\r\n    hasUnread(state) {\r\n      const thischat =\r\n        state.privateChat.chatMessages[this.recipient.summonerName];\r\n      let unreadMessages = 0;\r\n      if (thischat) {\r\n        unreadMessages = thischat.filter(message => {\r\n          return !message.read;\r\n        }).length;\r\n      }\r\n\r\n      if (!this.isOpen && unreadMessages > 0) {\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    },\r\n    isOpen(state) {\r\n      return (\r\n        state.privateChat.openChats.filter(recipient => {\r\n          return (\r\n            recipient.summonerName == this.recipient.summonerName &&\r\n            recipient.shows\r\n          );\r\n        }).length > 0\r\n      );\r\n    },\r\n    messages(state) {\r\n      const msgs = [\r\n        ...state.privateChat.chatMessages[this.recipient.summonerName]\r\n      ];\r\n\r\n      if (msgs) {\r\n        msgs.reverse();\r\n      }\r\n      return msgs;\r\n      //   return msgs\r\n      //     ? msgs.sort((a, b) => {\r\n      //         if (new Date(a.messageTimestamp) > new Date(b.messageTimestamp)) {\r\n      //           return 1;\r\n      //         } else if (\r\n      //           new Date(b.messageTimestamp) > new Date(a.messageTimestamp)\r\n      //         ) {\r\n      //           return -1;\r\n      //         } else {\r\n      //           return 0;\r\n      //         }\r\n      //       })\r\n      //     : [];\r\n    }\r\n  })\r\n};\r\n</script>\r\n\r\n<style lang=\"css\" scoped>\r\n.chatblock {\r\n  position: relative;\r\n  max-width: 220px;\r\n  height: 100%;\r\n  width: 30%;\r\n  margin-right: 5px;\r\n  filter: brightness(0.75);\r\n}\r\n\r\n.chatblock.unread {\r\n  animation: blinking ease-in-out 1s infinite;\r\n}\r\n\r\n@keyframes blinking {\r\n  0% {\r\n    filter: brightness(1);\r\n  }\r\n  50% {\r\n    filter: brightness(1.35);\r\n  }\r\n  100% {\r\n    filter: brightness(1);\r\n  }\r\n}\r\n\r\n.chatblock.open {\r\n  height: 240px;\r\n  margin-top: -200px;\r\n}\r\n\r\n.chatblock .content {\r\n  display: none;\r\n  flex-direction: column;\r\n  height: 200px;\r\n  width: 100%;\r\n  border: 1px solid rgba(100, 166, 255, 0.25);\r\n  /* background: linear-gradient(\r\n    90deg,\r\n    #237df7 0%,\r\n    #1c5fba 40%,\r\n    #0c3374 55%,\r\n    #0a223e 100%\r\n  ); */\r\n  background-color: #0c3374;\r\n  padding: 3px;\r\n}\r\n\r\n.chatblock .content .messages {\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: #0a223e;\r\n  border-radius: 2px;\r\n  width: 100%;\r\n  height: 80%;\r\n  overflow: auto;\r\n}\r\n\r\n.chatblock .content .messages .message {\r\n  font-size: 12px;\r\n  font-family: LoLFont2;\r\n  padding: 5px 2px;\r\n  line-break: anywhere;\r\n  color: whitesmoke;\r\n  border-bottom: 1px solid rgba(218, 165, 32, 0.45);\r\n  user-select: text;\r\n}\r\n\r\n.chatblock .content .messages .message:not(.recieved) {\r\n  /* text-align: right; */\r\n  background-color: #0e2e53;\r\n}\r\n\r\n.chatblock .content .input {\r\n  height: 20%;\r\n  width: 100%;\r\n}\r\n\r\n.chatblock .content .input input {\r\n  width: 100%;\r\n  height: 100%;\r\n  outline: none;\r\n  background-color: #0a223e;\r\n  color: whitesmoke;\r\n  border: 1px solid rgba(100, 166, 255, 0.25);\r\n}\r\n\r\n.chatblock.open .content {\r\n  display: flex;\r\n}\r\n\r\n.chatblock.open .head {\r\n  border-bottom-left-radius: 0;\r\n  border-bottom-right-radius: 0;\r\n  border-bottom: none;\r\n}\r\n\r\n.chatblock .head {\r\n  position: relative;\r\n  background: linear-gradient(\r\n    180deg,\r\n    #237df7 0%,\r\n    #1c5fba 40%,\r\n    #0c3374 55%,\r\n    #0a223e 100%\r\n  );\r\n  border-radius: 3px;\r\n  padding: 5px;\r\n  text-align: left;\r\n  padding-right: 30px;\r\n  height: 100%;\r\n  max-height: 33px;\r\n  width: 100%;\r\n  font-family: LoLFont2;\r\n  font-size: 16px;\r\n  border: 1px solid rgba(100, 166, 255, 0.25);\r\n  box-shadow: 0px 0px 5px 2px rgba(0, 0, 0, 0.75),\r\n    0px 0px 5px 2px rgba(255, 255, 255, 0.12);\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n}\r\n.chatblock .head .closeChatBtn {\r\n  position: absolute;\r\n  right: 5px;\r\n  top: 45%;\r\n  transform: translateY(-50%);\r\n  height: 23px;\r\n  width: 23px;\r\n  outline: none;\r\n  border: none;\r\n  filter: brightness(1.25);\r\n  border-radius: 4px;\r\n  box-shadow: 0px 0px 2px 0px rgba(255, 255, 255, 0.15);\r\n  border: 1px solid rgba(100, 166, 255, 0.25);\r\n  background: linear-gradient(\r\n    180deg,\r\n    #237df7 0%,\r\n    #1c5fba 40%,\r\n    #0c3374 55%,\r\n    #0a223e 100%\r\n  );\r\n  padding: 0;\r\n  font-size: 16px;\r\n  color: #cbf6ff;\r\n  transition: box-shadow ease-in-out 200ms;\r\n  cursor: pointer;\r\n}\r\n\r\n.chatblock .head .closeChatBtn:hover {\r\n  box-shadow: 0px 0px 4px 2px rgba(255, 255, 255, 0.15);\r\n}\r\n</style>\r\n"],"mappings":";;AAiCA,OAAAA,MAAA;AACA,SAAAC,QAAA;AACA;EACAC,KAAA;IACAC,SAAA,EAAAC;EACA;EACAC,OAAA;IACAC,UAAAC,OAAA;MACA,OAAAA,OAAA,CAAAC,IAAA,SAAAL,SAAA,CAAAM,YAAA;IACA;IACAC,WAAA;MACA,UAAAC,MAAA;QACA,KAAAC,OAAA,CAAAC,iBAAA,CACA,uBACA;UAAAC,IAAA,OAAAX;QAAA,GACA,CAAAY,QAAA,EAAAC,KAAA;UACA,IAAAA,KAAA;YACAC,OAAA,CAAAC,GAAA;YACAD,OAAA,CAAAC,GAAA,CAAAF,KAAA;UACA;UACA,KAAAG,MAAA,CAAAC,QAAA,oCAAAjB,SAAA;QACA,CACA;MACA;MAEA,KAAAgB,MAAA,CAAAC,QAAA;QACAX,YAAA,OAAAN,SAAA,CAAAM,YAAA;QACAY,MAAA;MACA;IACA;IACAC,UAAA;MACA,KAAAH,MAAA,CAAAC,QAAA,8BAAAjB,SAAA;IACA;IACAoB,WAAAhB,OAAA;MACA,UAAAP,MAAA,CAAAO,OAAA,CAAAiB,gBAAA,EAAAC,MAAA;IACA;IACAC,YAAA;MACA,MAAAnB,OAAA,QAAAoB,KAAA,CAAAC,SAAA,CAAAC,KAAA;MACA,IAAAtB,OAAA,CAAAuB,IAAA;QACA;MACA;MAEA,KAAAH,KAAA,CAAAC,SAAA,CAAAC,KAAA;MACA,KAAAjB,OAAA,CAAAC,iBAAA,CACA,mBACA;QACAC,IAAA,OAAAX,SAAA;QACAI,OAAA,EAAAA,OAAA;QACAC,IAAA,OAAAuB,IAAA,CAAAtB;MACA,GACA,CAAAM,QAAA,EAAAC,KAAA;QACA,IAAAA,KAAA;UACAC,OAAA,CAAAC,GAAA;UACAD,OAAA,CAAAC,GAAA,CAAAF,KAAA;QACA;MACA,CACA;IACA;EACA;EACAgB,QAAA;IACA,MAAAC,SAAA,QAAAC,GAAA,CAAAC,aAAA;IACAF,SAAA,CAAAG,SAAA,GAAAH,SAAA,CAAAI,YAAA;EACA;EACAC,QAAA;IACA,MAAAL,SAAA,QAAAC,GAAA,CAAAC,aAAA;IACAF,SAAA,CAAAG,SAAA,GAAAH,SAAA,CAAAI,YAAA;EACA;EACAE,QAAA,EAAAtC,QAAA;IACA8B,IAAA,EAAAS,KAAA,IAAAA,KAAA,CAAAT,IAAA;IACAU,UAAAD,KAAA;MACA,MAAAE,QAAA,GACAF,KAAA,CAAAG,WAAA,CAAAC,YAAA,MAAAzC,SAAA,CAAAM,YAAA;MACA,IAAAoC,cAAA;MACA,IAAAH,QAAA;QACAG,cAAA,GAAAH,QAAA,CAAAI,MAAA,CAAAvC,OAAA;UACA,QAAAA,OAAA,CAAAwC,IAAA;QACA,GAAAC,MAAA;MACA;MAEA,UAAArC,MAAA,IAAAkC,cAAA;QACA;MACA;QACA;MACA;IACA;IACAlC,OAAA6B,KAAA;MACA,OACAA,KAAA,CAAAG,WAAA,CAAAM,SAAA,CAAAH,MAAA,CAAA3C,SAAA;QACA,OACAA,SAAA,CAAAM,YAAA,SAAAN,SAAA,CAAAM,YAAA,IACAN,SAAA,CAAA+C,KAAA;MAEA,GAAAF,MAAA;IAEA;IACAG,SAAAX,KAAA;MACA,MAAAY,IAAA,IACA,GAAAZ,KAAA,CAAAG,WAAA,CAAAC,YAAA,MAAAzC,SAAA,CAAAM,YAAA,EACA;MAEA,IAAA2C,IAAA;QACAA,IAAA,CAAAC,OAAA;MACA;MACA,OAAAD,IAAA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}