{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport { readdirSync, readFileSync } from \"fs\";\nimport { join } from \"path\";\nimport { ipcRenderer } from \"electron\";\n\n// Somehow this is undefined\nconst __STATIC = ipcRenderer.invoke(\"getStatic\").then(result => {\n  return result;\n});\n\n// We need a vue instance to handle reactivity\nvar vm = null;\nconst VueTranslate = {\n  install(Vue) {\n    const version = Vue.version[0];\n    if (!vm) {\n      vm = new Vue({\n        data() {\n          return {\n            current: \"\",\n            locales: {},\n            loadedlanguages: [],\n            loadedOnce: false\n          };\n        },\n        computed: {\n          // Current selected language\n          lang() {\n            return this.current;\n          },\n          // Current locale values\n          locale() {\n            if (!this.locales[this.current]) return null;\n            return this.locales[this.current];\n          }\n        },\n        methods: {\n          // Set a language as current\n          setLang(val) {\n            if (this.current !== val) {\n              if (this.current === \"\") {\n                this.$emit(\"language:init\", val);\n              } else {\n                this.$emit(\"language:changed\", val);\n              }\n            }\n            this.current = val;\n            this.$emit(\"language:modified\", val);\n          },\n          // Get the loaded languages\n          getLanguages() {\n            return this.loadedlanguages;\n          },\n          printMissing() {\n            if (process.env.VUE_APP_VERSION !== \"undefined\") return;\n            let languages = this.getLanguages();\n            if (languages.length == 0) return;\n            const enus_lang = languages.filter(language => {\n              return language.code == \"en_US\";\n            })[0].locale;\n            let shouldHave = Object.keys(enus_lang);\n            let doesntHave = {\n              date: new Date(),\n              keys_en: {},\n              langs: {}\n            };\n            languages.forEach(language => {\n              let has = Object.keys(language.locale);\n              shouldHave.forEach(sh_key => {\n                if (!has.includes(sh_key)) {\n                  if (typeof doesntHave.langs[language.code] == \"undefined\") {\n                    doesntHave.langs[language.code] = [];\n                  }\n                  doesntHave.langs[language.code].push(sh_key);\n                  doesntHave.keys_en[sh_key] = enus_lang[sh_key];\n                }\n              });\n            });\n            if (Object.keys(doesntHave).length > 0) {\n              ipcRenderer.send(\"translate_missing_langkeys\", doesntHave);\n            }\n          },\n          // Load static lanugages safely\n          safeLoadLanguages(path, defaultLang) {\n            if (!this.loadedOnce) {\n              this.loadLanguages(path, defaultLang);\n              return true;\n            } else {\n              return false;\n            }\n          },\n          // Load static languages\n          loadLanguages(path, defaultLang) {\n            this.loadedOnce = true;\n            let langFolderPath = path;\n            if (!langFolderPath) {\n              __STATIC.then(result => {\n                langFolderPath = join(result, \"lang\");\n                this.loadLanguagesInternal(readdirSync(langFolderPath), langFolderPath, defaultLang);\n              });\n            } else {\n              this.loadLanguagesInternal(readdirSync(langFolderPath), langFolderPath, defaultLang);\n            }\n          },\n          loadLanguagesInternal(langDir, langFolderPath, defaultLang) {\n            let locales = {};\n            langDir.forEach(file => {\n              const fileContents = readFileSync(join(langFolderPath, file), \"utf-8\");\n              try {\n                const jsonContent = JSON.parse(fileContents);\n                locales[jsonContent.code] = jsonContent.locale;\n                // delete jsonContent.locale;\n                this.loadedlanguages.push(jsonContent);\n                console.log(`Language '${jsonContent.language}' successfully loaded. Made by ${jsonContent.author}.`);\n              } catch (error) {\n                console.error(error);\n                console.log(`One of the languages failed to load. (${file})`);\n              }\n            });\n            this.setLocales(locales);\n            if (defaultLang && typeof locales[defaultLang] !== \"undefined\") {\n              this.setLang(defaultLang);\n            }\n            this.printMissing();\n          },\n          // Set a locale to use\n          setLocales(locales) {\n            if (!locales) return;\n            let newLocale = Object.create(this.locales);\n            for (let key in locales) {\n              if (!newLocale[key]) newLocale[key] = {};\n              Vue.util.extend(newLocale[key], locales[key]);\n            }\n            this.locales = Object.create(newLocale);\n            this.$emit(\"locales:loaded\", locales);\n          },\n          text(t) {\n            if (!this.locale || !this.locale[t]) {\n              return t;\n            }\n            return this.locale[t];\n          },\n          textWithParams(t, params = null) {\n            if (!this.locale || !this.locale[t]) {\n              return t;\n            }\n            if (!params || params === null || typeof params === \"undefined\") {\n              return t;\n            }\n            Object.keys(params).forEach((key, index) => {\n              if (index > 0) {\n                t = t.replace(`%${key}%`, params[key]);\n              } else {\n                t = this.locale[t].replace(`%${key}%`, params[key]);\n              }\n            });\n            return t;\n          }\n        }\n      });\n      Vue.prototype.$translate = vm;\n    }\n\n    // Mixin to read locales and add the translation method and directive\n    Vue.mixin({\n      [version === \"1\" ? \"init\" : \"beforeCreate\"]() {\n        this.$translate.setLocales(this.$options.locales);\n      },\n      methods: {\n        // An alias for the .$translate.text method\n        t(t) {\n          return this.$translate.text(t);\n        },\n        tWithParams(t, params) {\n          return this.$translate.textWithParams(t, params);\n        }\n      },\n      directives: {\n        translate: function (el) {\n          if (!el.$translateKey) el.$translateKey = el.innerText;\n          let text = this.$translate.text(el.$translateKey);\n          el.innerText = text;\n        }.bind(vm)\n      }\n    });\n\n    // Global method to load static locales\n    Vue.loadLanguages = (path = null, defaultLang = null) => {\n      vm.$translate.loadLanguages(path, defaultLang);\n    };\n\n    // Global method for loading locales\n    Vue.locales = locales => {\n      vm.$translate.setLocales(locales);\n    };\n\n    // Global method for setting languages\n    Vue.lang = lang => {\n      vm.$translate.setLang(lang);\n    };\n  }\n};\nexport default VueTranslate;","map":{"version":3,"names":["readdirSync","readFileSync","join","ipcRenderer","__STATIC","invoke","then","result","vm","VueTranslate","install","Vue","version","data","current","locales","loadedlanguages","loadedOnce","computed","lang","locale","methods","setLang","val","$emit","getLanguages","printMissing","process","env","VUE_APP_VERSION","languages","length","enus_lang","filter","language","code","shouldHave","Object","keys","doesntHave","date","Date","keys_en","langs","forEach","has","sh_key","includes","push","send","safeLoadLanguages","path","defaultLang","loadLanguages","langFolderPath","loadLanguagesInternal","langDir","file","fileContents","jsonContent","JSON","parse","console","log","author","error","setLocales","newLocale","create","key","util","extend","text","t","textWithParams","params","index","replace","prototype","$translate","mixin","$options","tWithParams","directives","translate","el","$translateKey","innerText","bind"],"sources":["D:/game/lol/ls4/ls4-launcher/src/plugins/translate.js"],"sourcesContent":["import { readdirSync, readFileSync } from \"fs\";\r\nimport { join } from \"path\";\r\nimport { ipcRenderer } from \"electron\";\r\n\r\n// Somehow this is undefined\r\nconst __STATIC = ipcRenderer.invoke(\"getStatic\").then(result => {\r\n  return result;\r\n});\r\n\r\n// We need a vue instance to handle reactivity\r\nvar vm = null;\r\n\r\nconst VueTranslate = {\r\n  install(Vue) {\r\n    const version = Vue.version[0];\r\n\r\n    if (!vm) {\r\n      vm = new Vue({\r\n        data() {\r\n          return {\r\n            current: \"\",\r\n            locales: {},\r\n            loadedlanguages: [],\r\n            loadedOnce: false\r\n          };\r\n        },\r\n\r\n        computed: {\r\n          // Current selected language\r\n          lang() {\r\n            return this.current;\r\n          },\r\n\r\n          // Current locale values\r\n          locale() {\r\n            if (!this.locales[this.current]) return null;\r\n\r\n            return this.locales[this.current];\r\n          }\r\n        },\r\n\r\n        methods: {\r\n          // Set a language as current\r\n          setLang(val) {\r\n            if (this.current !== val) {\r\n              if (this.current === \"\") {\r\n                this.$emit(\"language:init\", val);\r\n              } else {\r\n                this.$emit(\"language:changed\", val);\r\n              }\r\n            }\r\n\r\n            this.current = val;\r\n\r\n            this.$emit(\"language:modified\", val);\r\n          },\r\n\r\n          // Get the loaded languages\r\n          getLanguages() {\r\n            return this.loadedlanguages;\r\n          },\r\n\r\n          printMissing() {\r\n            if (process.env.VUE_APP_VERSION !== \"undefined\") return;\r\n            let languages = this.getLanguages();\r\n\r\n            if (languages.length == 0) return;\r\n\r\n            const enus_lang = languages.filter(language => {\r\n              return language.code == \"en_US\";\r\n            })[0].locale;\r\n            let shouldHave = Object.keys(enus_lang);\r\n\r\n            let doesntHave = {\r\n              date: new Date(),\r\n              keys_en: {},\r\n              langs: {}\r\n            };\r\n\r\n            languages.forEach(language => {\r\n              let has = Object.keys(language.locale);\r\n              shouldHave.forEach(sh_key => {\r\n                if (!has.includes(sh_key)) {\r\n                  if (typeof doesntHave.langs[language.code] == \"undefined\") {\r\n                    doesntHave.langs[language.code] = [];\r\n                  }\r\n                  doesntHave.langs[language.code].push(sh_key);\r\n                  doesntHave.keys_en[sh_key] = enus_lang[sh_key];\r\n                }\r\n              });\r\n            });\r\n\r\n            if (Object.keys(doesntHave).length > 0) {\r\n              ipcRenderer.send(\"translate_missing_langkeys\", doesntHave);\r\n            }\r\n          },\r\n\r\n          // Load static lanugages safely\r\n          safeLoadLanguages(path, defaultLang) {\r\n            if (!this.loadedOnce) {\r\n              this.loadLanguages(path, defaultLang);\r\n              return true;\r\n            } else {\r\n              return false;\r\n            }\r\n          },\r\n\r\n          // Load static languages\r\n          loadLanguages(path, defaultLang) {\r\n            this.loadedOnce = true;\r\n            let langFolderPath = path;\r\n\r\n            if (!langFolderPath) {\r\n              __STATIC.then(result => {\r\n                langFolderPath = join(result, \"lang\");\r\n                this.loadLanguagesInternal(\r\n                  readdirSync(langFolderPath),\r\n                  langFolderPath,\r\n                  defaultLang\r\n                );\r\n              });\r\n            } else {\r\n              this.loadLanguagesInternal(\r\n                readdirSync(langFolderPath),\r\n                langFolderPath,\r\n                defaultLang\r\n              );\r\n            }\r\n          },\r\n\r\n          loadLanguagesInternal(langDir, langFolderPath, defaultLang) {\r\n            let locales = {};\r\n\r\n            langDir.forEach(file => {\r\n              const fileContents = readFileSync(\r\n                join(langFolderPath, file),\r\n                \"utf-8\"\r\n              );\r\n              try {\r\n                const jsonContent = JSON.parse(fileContents);\r\n                locales[jsonContent.code] = jsonContent.locale;\r\n                // delete jsonContent.locale;\r\n                this.loadedlanguages.push(jsonContent);\r\n                console.log(\r\n                  `Language '${jsonContent.language}' successfully loaded. Made by ${jsonContent.author}.`\r\n                );\r\n              } catch (error) {\r\n                console.error(error);\r\n                console.log(`One of the languages failed to load. (${file})`);\r\n              }\r\n            });\r\n\r\n            this.setLocales(locales);\r\n            if (defaultLang && typeof locales[defaultLang] !== \"undefined\") {\r\n              this.setLang(defaultLang);\r\n            }\r\n            this.printMissing();\r\n          },\r\n\r\n          // Set a locale to use\r\n          setLocales(locales) {\r\n            if (!locales) return;\r\n\r\n            let newLocale = Object.create(this.locales);\r\n\r\n            for (let key in locales) {\r\n              if (!newLocale[key]) newLocale[key] = {};\r\n\r\n              Vue.util.extend(newLocale[key], locales[key]);\r\n            }\r\n\r\n            this.locales = Object.create(newLocale);\r\n\r\n            this.$emit(\"locales:loaded\", locales);\r\n          },\r\n\r\n          text(t) {\r\n            if (!this.locale || !this.locale[t]) {\r\n              return t;\r\n            }\r\n\r\n            return this.locale[t];\r\n          },\r\n\r\n          textWithParams(t, params = null) {\r\n            if (!this.locale || !this.locale[t]) {\r\n              return t;\r\n            }\r\n\r\n            if (!params || params === null || typeof params === \"undefined\") {\r\n              return t;\r\n            }\r\n\r\n            Object.keys(params).forEach((key, index) => {\r\n              if (index > 0) {\r\n                t = t.replace(`%${key}%`, params[key]);\r\n              } else {\r\n                t = this.locale[t].replace(`%${key}%`, params[key]);\r\n              }\r\n            });\r\n\r\n            return t;\r\n          }\r\n        }\r\n      });\r\n\r\n      Vue.prototype.$translate = vm;\r\n    }\r\n\r\n    // Mixin to read locales and add the translation method and directive\r\n    Vue.mixin({\r\n      [version === \"1\" ? \"init\" : \"beforeCreate\"]() {\r\n        this.$translate.setLocales(this.$options.locales);\r\n      },\r\n\r\n      methods: {\r\n        // An alias for the .$translate.text method\r\n        t(t) {\r\n          return this.$translate.text(t);\r\n        },\r\n\r\n        tWithParams(t, params) {\r\n          return this.$translate.textWithParams(t, params);\r\n        }\r\n      },\r\n\r\n      directives: {\r\n        translate: function(el) {\r\n          if (!el.$translateKey) el.$translateKey = el.innerText;\r\n\r\n          let text = this.$translate.text(el.$translateKey);\r\n\r\n          el.innerText = text;\r\n        }.bind(vm)\r\n      }\r\n    });\r\n\r\n    // Global method to load static locales\r\n    Vue.loadLanguages = (path = null, defaultLang = null) => {\r\n      vm.$translate.loadLanguages(path, defaultLang);\r\n    };\r\n\r\n    // Global method for loading locales\r\n    Vue.locales = locales => {\r\n      vm.$translate.setLocales(locales);\r\n    };\r\n\r\n    // Global method for setting languages\r\n    Vue.lang = lang => {\r\n      vm.$translate.setLang(lang);\r\n    };\r\n  }\r\n};\r\n\r\nexport default VueTranslate;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}